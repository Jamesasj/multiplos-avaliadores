"Há um trem na plataforma A. Há outro train na plataforma B"))
resultado <- strsplit(dados$texto, "mas ")
View(resultado)
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "characters")
View(tokens)
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "lines")
dados <- data_frame(documento = c(1,2),
texto = c("O novo software funcionou bem, mas ninguém ficou feliz essse resulta",
"Há um trem na plataforma A.
Há outro train na plataforma B"))
resultado <- strsplit(dados$texto, "mas ")
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "lines")
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "sentences")
View(tokens)
dados <- data_frame(documento = c(1,2),
texto = c("O novo software funcionou bem, mas ninguém ficou feliz essse resulta",
"Há um trem na plataforma A. Há outro train na plataforma B"))
resultado <- strsplit(dados$texto, "mas ")
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "sentences")
View(tokens)
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "sentences")
View(tokens)
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
tokens <- dados %>% unnest_tokens(palavras, texto,token =  "sentences")
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences")
a2 <- a1
unnest(setNames(strsplit(a1$sentencas, ','), a1$sentencas), Description) %>% unique()
strsplit(a1$sentencas, ',')
setNames(strsplit(a1$sentencas, ','), a1$documento)
unnest(setNames(strsplit(a1$sentencas, ','), a1$documento), documento)
library(tidyr)
library(dplyr)
library(tidytext)
unnest(setNames(strsplit(a1$sentencas, ','), a1$documento), documento) %>% unique()
setNames(strsplit(a1$sentencas, ','), a1$documento), documento)
setNames(strsplit(a1$sentencas, ','), a1$documento)
unnest(setNames(strsplit(a1$sentencas, ','), a1$documento), sentencas)
dados <- setNames(strsplit(a1$sentencas, ','), a1$documento)
dados <- setNames(strsplit(a1$sentencas, ','), a1$documento)
View(dados)
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences")
a2 <- a1 %>% unnest_tokens(sentencas, sentencas, token = )
dados2 <- setNames(strsplit(a1$sentencas, ','), a1$documento)
View(dados2)
df <- tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h")
)
View(df)
df %>%
transform(y = strsplit(y, ",")) %>%
unnest(y)
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,",")) %>% unnest(sentences)
a1 %>% transform(sentencas = strsplit(sentencas,","))
View(a1 %>% transform(sentencas = strsplit(sentencas,",")))
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,",")) %>% unnest(sentencas)
View(a2)
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences") #separar sentenças por segmento
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,";")) %>% unnest(sentencas) # separa por ponto-vigula
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences") #separar sentenças por segmento
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,";")) %>% unnest(sentencas) # separa por ponto-vigula
library(tidyr)
library(dplyr)
library(tidytext)
library(tidyverse)
#Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies.
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences") #separar sentenças por segmento
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,";")) %>% unnest(sentencas) # separa por ponto-vigula
View(a2)
a3 <- a2 %>% transform(sentencas = strsplit(sentencas,":")) %>% unnest(sentencas) # separa por dois-pontos
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences") #separar sentenças por segmento
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,";")) %>% unnest(sentencas) # separa por ponto-vigula
a3 <- a2 %>% transform(sentencas = strsplit(sentencas,":")) %>% unnest(sentencas) # separa por dois-pontos
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york: Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>% unnest_tokens(sentencas, texto,token =  "sentences") #separar sentenças por segmento
a2 <- a1 %>% transform(sentencas = strsplit(sentencas,";")) %>% unnest(sentencas) # separa por ponto-vigula
a3 <- a2 %>% transform(sentencas = strsplit(sentencas,":")) %>% unnest(sentencas) # separa por dois-pontos
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>%
unnest_tokens(sentencas, texto,token =  "sentences") #separar sentenças por segmento
a2 <- a1 %>%
transform(sentencas = strsplit(sentencas,";")) %>%
unnest(sentencas) # separa por ponto-vigula
a3 <- a2 %>%
transform(sentencas = strsplit(sentencas,":")) %>%
unnest(sentencas) # separa por dois-pontos
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,",")) %>%
unnest(sentencas) # separa por vigula*
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>%
unnest_tokens(sentencas, texto,token =  "sentences", to_lower = FALSE) #separar sentenças por segmento
a2 <- a1 %>%
transform(sentencas = strsplit(sentencas,";")) %>%
unnest(sentencas) # separa por ponto-vigula
a3 <- a2 %>%
transform(sentencas = strsplit(sentencas,":")) %>%
unnest(sentencas) # separa por dois-pontos
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,",")) %>%
unnest(sentencas) # separa por vigula*
View(a4)
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou modifica locução prepositiva
library(tidyr)
library(dplyr)
library(tidytext)
library(tidyverse)
#Three new issues began trading on the new york Stok Exchage today, : and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies.
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>%
unnest_tokens(sentencas, texto,token =  "sentences", to_lower = FALSE) #separar sentenças por segmento
a2 <- a1 %>%
transform(sentencas = strsplit(sentencas,";")) %>%
unnest(sentencas) # separa por ponto-vigula
a3 <- a2 %>%
transform(sentencas = strsplit(sentencas,":")) %>%
unnest(sentencas) # separa por dois-pontos
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but", "(?=.(on)*?),"))) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but", "/(?=.(on)*?),/"))) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but" , "(?=.(on)*?)," ))) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,"(?=.(on)*?)," )) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,"(?=.(on)*?)," , perl = TRUE)) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
View(a4)
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
transform(sentencas = strsplit(sentencas, "(?=.(on)*?)," , split = TRUE)) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
transform(sentencas = strsplit(sentencas, "(?=.(on)*?)," , perl = TRUE)) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but")))
a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
transform(sentencas = strsplit(sentencas, "(?=.(on)*?)," , perl = TRUE))
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=.(on)*?)," , perl = TRUE)) %>%
unnest(sentencas)
View(a4)
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=\s(On)\s.*?)," , perl = TRUE)) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
library(tidyr)
library(dplyr)
library(tidytext)
library(tidyverse)
#Three new issues began trading on the new york Stok Exchage today, : and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies.
dados <- data_frame(documento = c(1),
texto = c("Three new issues began trading on the new york Stok Exchage today, and one began trading on the Nasdaq/National Makdet System last week. On the Big Board, Crawford & CO., Altlanta, (CFD) began trading today. Crawford evaluates health care plans, manages medical and disabality aspects of worker's compensation injuries and is involved in claims adjustmentes for insurance companies."))
a1 <- dados %>%
unnest_tokens(sentencas, texto,token =  "sentences", to_lower = FALSE) #separar sentenças por segmento
a2 <- a1 %>%
transform(sentencas = strsplit(sentencas,";")) %>%
unnest(sentencas) # separa por ponto-vigula
a3 <- a2 %>%
transform(sentencas = strsplit(sentencas,":")) %>%
unnest(sentencas) # separa por dois-pontos
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=\s(On)\s.*?)," , perl = TRUE)) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a4 <- a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=\s(On)\s.*?),")) %>%
unnest(sentencas) # separa por vigula que marca uma sentença, proposição ou **modifica locução** prepositiva
a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=\s(On)\s.*?),"))
a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=/\s(On)/\s.*?),"))
a3 %>%
transform(sentencas = strsplit(sentencas,c(", and", ", but"))) %>%
unnest(sentencas) %>%
transform(sentencas = strsplit(sentencas, "(?=\\s(On)\\s.*?),"))
install.packages("CRF")
library(CRF)
kappa(x1 <- cbind(1, 1:10)) # 15.71
kappa(x1, exact = TRUE)        # 13.68
kappa(x2 <- cbind(x1, 2:11)) # high! [x2 is singular!]
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
sv9 <- svd(h9 <- hilbert(9))$ d
kappa(h9)  # pretty high!
kappa(h9, exact = TRUE) == max(sv9) / min(sv9)
kappa(h9, exact = TRUE) / kappa(h9)  # 0.677 (i.e., rel.error = 32%)
kappa(x1 <- cbind(1, 1:10)) # 15.71
kappa(x1, exact = TRUE)        # 13.68
kappa(x2 <- cbind(x1, 2:11)) # high! [x2 is singular!]
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
sv9 <- svd(h9 <- hilbert(9))$ d
kappa(h9)  # pretty high!
kappa(h9, exact = TRUE) == max(sv9) / min(sv9)
kappa(h9, exact = TRUE) / kappa(h9)  # 0.677 (i.e., rel.error = 32%)
View(x1)
View(x2)
res <- kappa(x1 <- cbind(1, 1:10)) # 15.71
kappa(x2 <- cbind(x1, 2:11)) # high! [x2 is singular!]
View(h9)
kappa(h9)  # pretty high!
res <- kappa.qr(x1 <- cbind(1, 1:10)) # 15.71
res <- kappa.default(x1 <- cbind(1, 1:10)) # 15.71
res <- kappa(x1 <- cbind(50:40, 1:10))
res <- kappa(x1 <- cbind(40:50, 1:10))
res <- kappa(x1 <- cbind(41:50, 1:10))
res <- kappa(x1 <- cbind(1:10, 1:10))
res <- kappa(x1 <- cbind(1, 1:10))
res <- kappa(x1 <- cbind(1:10, 1:10))
res <- kappa(x1 <- t(cbind(1:10, 1:10))) # 15.71
res <- kappa(x1 <- t(cbind(1, 1:10))) # 15.71
install.packages("KappaGUI")
library(KappaGUI)
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Trait1_A = c(1,0,2,1,1,1,0,2,1,1),
Trait1_B = c(1,2,0,1,2,1,0,1,2,1),
Trait2_A = c(1,4,5,2,3,5,1,2,3,4),
Trait2_B = c(2,5,2,2,4,5,1,3,1,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
res <- kappaCohen(scores, weight="unweighted")
View(scores)
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
ProfessorA = c(1,0,2,1,1,1,0,2,1,1),
ProfessorB = c(1,2,0,1,2,1,0,1,2,1),
ProfessorC = c(1,4,5,2,3,5,1,2,3,4),
ProfessorD = c(2,5,2,2,4,5,1,3,1,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Professor1A = c(1,0,2,1,1,1,0,2,1,1),
Professor2B = c(1,2,0,1,2,1,0,1,2,1),
Professor1C = c(1,4,5,2,3,5,1,2,3,4),
Professor2D = c(2,5,2,2,4,5,1,3,1,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
library(KappaGUI)
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Professor1_A = c(1,0,2,1,1,1,0,2,1,1),
Professor1_B = c(1,2,0,1,2,1,0,1,2,1),
Professor2_A = c(1,4,5,2,3,5,1,2,3,4),
Professor2_B = c(2,5,2,2,4,5,1,3,1,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Professor1_A = c(1,0,2,1,1,1,0,2,1,1),
Professor2_A = c(1,4,5,2,3,5,1,2,3,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Professor1_A = c(1,4,5,2,3,5,1,2,3,4),
Professor2_A = c(1,4,5,2,3,5,1,2,3,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Professor1_A = c(1,4,5,2,3,5,1,2,3,4),
Professor2_A = c(1,4,5,2,3,0,1,2,3,4)
)
scores
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
kappaCohen(scores, weight="squared")
# Here we create and display an artifical dataset,
# describing two traits coded by two raters:
scores <- data.frame(
Professor1_A = c(1,4,5,2,3,5,1,2,3,4),
Professor2_A = c(1,4,5,2,3,0,1,2,3,4),
Professor3_A = c(1,4,5,2,3,5,1,2,3,4)
)
# Retrieve Cohen's kappa for Trait1 and Trait2,
# to evaluate inter-rater agreement between raters A and B:
res <- kappaCohen(scores, weight="unweighted")
con <- socketConnection("127.0.0.1", port = 5000)
writeLines("all the world's a stage", con)
x = readLines(con)
x
writeLines("all the world's a stage", con)
x
close(con)
con <- socketConnection("127.0.0.1", port = 5000)
writeLines("all the world's a stage", con)
x = readLines(con)
x
x
x
close(con)
con <- socketConnection("127.0.0.1", port = 5000)
writeLines("Ser ou não ser, eis a questão: será mais nobre
Em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?", con)
x = readLines(con)
x
writeLines("close", con)
con <- socketConnection("127.0.0.1", port = 5000)
writeLines("Ser ou não ser, eis a questão: será mais nobre
Em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?", con)
x = readLines(con)
x
x = readLines(con)
x
writeLines("close", con)
con <- socketConnection("127.0.0.1", port = 5000)
con <- socketConnection("127.0.0.1", port = 5000)
writeLines("Ser ou não ser, eis a questão: será mais nobre
Em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?", con)
x = readLines(con)
x
h= readLines(con)
h
writeLines("Ser ou não ser, eis a questão: será mais nobre
Em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?", con)
h= readLines(con)
h
writeLines("close", con)
con <- socketConnection("127.0.0.1", port = 5000)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
x <- readLines(con)
writeLines("close", con)
close(con)
x
con <- socketConnection("127.0.0.1", port = 5000)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
x <- readLines(con)
x
writeLines(texto, con)
x <- readLines(con)
x
writeLines("close", con)
con <- socketConnection("127.0.0.1", port = 5000)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
x <- readLines(con)
x
writeLines("close", con)
con <- socketConnection("127.0.0.1", port = 5000)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
Sys.sleep(2000)
con <- socketConnection("127.0.0.1", port = 5000)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
Sys.sleep(2)
x <- readLines(con)
x
writeLines(texto, con)
Sys.sleep(100)
writeLines("close", con)
writeLines("close", con)
con <- socketConnection("127.0.0.1", port = 5000)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
Sys.sleep(100)
con <- socketConnection("127.0.0.1", port = 5001)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
Sys.sleep(3)
x <- readLines(con)
x
writeLines("close", con)
close(con)
con <- socketConnection("127.0.0.1", port = 5001)
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
Sys.sleep(2)
x <- readLines(con)
x
writeLines(texto, con)
Sys.sleep(2)
x <- readLines(con)
x
texto <- "Ser ou não ser, eis a questão: Será mais nobre em nosso. Espírito sofrer pedras e setas com que a Fortuna, enfurecida, nos alveja, ou insurgir-nos contra um mar de provações e em luta pôr-lhes fim?"
writeLines(texto, con)
Sys.sleep(1)
x <- readLines(con)
x
writeLines("close", con)
# Boxplot of MPG by Car Cylinders
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
dados <- mtcars
dados <- data.frame(criterio = c(1,2,3,),
professorA = c(1,1,1),
professorB = c(2,2,2),
kappa = c (0.5,1.0.1))
dados <- data.frame(criterio = c(1,2,3,),
professorA = c(1,1,1),
professorB = c(2,2,2),
kappa = c (0.5,1,0.1))
dados <- data.frame(criterio = c(1,2,3),
professorA = c(1,1,1),
professorB = c(2,2,2),
kappa = c (0.5,1,0.1))
boxplot(kappa~criterio,data=dados, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
dados <- data.frame(criterio = c(1,2,3,1,2,3),
professorA = c(1,1,1,2,2,2),
professorB = c(2,2,2,3,3,3),
kappa = c (0.5,1,0.1,0.3,0.4,1))
boxplot(kappa~criterio,data=dados, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
dados <- data.frame(criterio = c(1,2,3,1,2,3,1,2,3),
professorA = c(1,1,1,2,2,2,3,3,3),
professorB = c(2,2,2,3,3,3,4,4,4),
kappa = c (0.5,1,0.1,0.3,0.4,1,1,1,1))
boxplot(kappa~criterio,data=dados, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
dados <- data.frame(criterio = c(1,2,3,1,2,3,1,2,3),
professorA = c(1,1,1,2,2,2,3,3,3),
professorB = c(2,2,2,3,3,3,4,4,4),
kappa = c (0.5,1,0.1,0.3,0.4,1,1,1,1))
boxplot(kappa~criterio,data=dados,
xlab="Coeficiente Kappa", ylab="Critério")
boxplot(kappa~criterio,data=dados,
xlab="Critério", ylab="Coeficiente Kappa")
dados <- data.frame(criterio = c(1,2,3,1,2,3,1,2,3),
professorA = c(1,1,1,2,2,2,3,3,3),
professorB = c(2,2,2,3,3,3,4,4,4),
kappa = c (0.5,1,0.1,0.3,0.4,1,1,1,1))
jpeg("coeficienteKappa.jpg")
boxplot(kappa~criterio,data=dados,
xlab="Critério", ylab="Coeficiente Kappa")
dev.off()
setwd("C:\PROJETOS\avaliacao_pares_professor")
setwd("C:\\PROJETOS\\avaliacao_pares_professor")
setwd("C:\\PROJETOS\\avaliacao_pares_professor")
dados <- data.frame(criterio = c(1,2,3,1,2,3,1,2,3),
professorA = c(1,1,1,2,2,2,3,3,3),
professorB = c(2,2,2,3,3,3,4,4,4),
kappa = c (0.5,1,0.1,0.3,0.4,1,1,1,1))
jpeg("coeficienteKappa.jpg")
boxplot(kappa~criterio,data=dados,
xlab="Critério", ylab="Coeficiente Kappa")
dev.off()
